# Name of your application. Used to uniquely configure containers.
service: tendril-tasks

# Name of the container image.
image: your-user/tendril-tasks

# Deploy to these servers.
servers:
  web:
    - 192.168.0.1
  # job:
  #   hosts:
  #     - 192.168.0.1
  #   cmd: bin/jobs

# Enable SSL auto certification via Let's Encrypt (and allow for multiple apps on one server).
# Set ssl: false if using something like Cloudflare to terminate SSL (but keep host!).
proxy:
  ssl: true
  host: app.example.com

# Credentials for your image host.
registry:
  # Specify the registry server, if you're not using Docker Hub
  # server: registry.digitalocean.com / ghcr.io / ...
  username: your-user

  # Always use an access token rather than real password when possible.
  password:
    - KAMAL_REGISTRY_PASSWORD

# Inject ENV variables into containers (secrets come from .kamal/secrets).
env:
  secret:
    - RAILS_MASTER_KEY
    - ROCKET_CHAT_CLIENT_ID
    - ROCKET_CHAT_CLIENT_SECRET
  clear:
    # Configure Tendril Tasks --------------------------------------------------
    # Application host, e.g. "example.com".
    # Used to configure:
    # - `Rails.application.routes.default_url_options[:host]`
    # - `Rails.application.action_mailer.default_url_options[:host]`
    # APP_HOST: ""

    # Default HTML title for the application. Defaults to a localized version of
    # this example.
    # APP_TITLE: "TendrilTasks - growing beyond ourselves together"

    # Default locale for the application. Defaults to "en".
    # Available locales: en, de
    # APP_DEFAULT_LOCALE: "en"

    # Default time zone for the application. Defaults to "UTC".
    # Available time zones: https://api.rubyonrails.org/classes/ActiveSupport/TimeZone.html
    # APP_TIME_ZONE: "UTC"

    # Configure the Database -------------------------------------------------------
    # Nothing here. We only support SQLite for now. If you would like to add
    # additional PG support, a PR would be most welcome! Happy to discuss the
    # required steps upfront.

    # Configure Rocket Chat ----------------------------------------------------
    # Rocket Chat server URL (aka workspace), e.g. "https://chat.example.com".
    # Make sure you also pass in `ROCKET_CHAT_CLIENT_ID` and
    # `ROCKET_CHAT_CLIENT_SECRET` through `.kamal/secrets`.
    # ROCKET_CHAT_HOST: "https://chat.example.com"

    # Rocket Chat endpoints for OAuth2 authorization and token exchange.
    # You only need to change these if you modified the Rocket Chat's settings.
    # Relative and absolute URLs are supported.
    # ROCKET_CHAT_AUTHORIZE_URL: "/oauth/authorize"
    # ROCKET_CHAT_TOKEN_URL: "/oauth/token"

    # How should we refer to Rocket Chat in descriptions and on buttons,
    # e.g. "Tendril Chat"?
    # Keep it reasonably short, as it appears on buttons.
    # ROCKET_CHAT_BRANDING: "Rocket.Chat"

    # Configure Rails ----------------------------------------------------------
    # Run the Solid Queue Supervisor inside the web server's Puma process to do jobs.
    # When you start using multiple servers, you should split out job processing to a dedicated machine.
    SOLID_QUEUE_IN_PUMA: true

    # Set number of processes dedicated to Solid Queue (default: 1)
    # JOB_CONCURRENCY: 3

    # Set number of cores available to the application on each server (default: 1).
    # WEB_CONCURRENCY: 2

    # Match this to any external database server to configure Active Record correctly
    # Use tendril-tasks-db for a db accessory server on same machine via local kamal docker network.
    # DB_HOST: 192.168.0.2

    # Log everything from Rails
    # RAILS_LOG_LEVEL: debug

# Aliases are triggered with "bin/kamal <alias>". You can overwrite arguments on invocation:
# "bin/kamal logs -r job" will tail logs from the first server in the job section.
aliases:
  console: app exec --interactive --reuse "bin/rails console"
  shell: app exec --interactive --reuse "bash"
  logs: app logs -f
  dbc: app exec --interactive --reuse "bin/rails dbconsole"


# Use a persistent storage volume for sqlite database files and local Active Storage files.
# Recommended to change this to a mounted volume path that is backed up off server.
volumes:
  - "tendril-tasks_storage:/rails/storage"


# Bridge fingerprinted assets, like JS and CSS, between versions to avoid
# hitting 404 on in-flight requests. Combines all files from new and old
# version inside the asset_path.
asset_path: /rails/public/assets

# Configure the image builder.
builder:
  arch: amd64

  # # Build image via remote server (useful for faster amd64 builds on arm64 computers)
  # remote: ssh://docker@docker-builder-server
  #
  # # Pass arguments and secrets to the Docker build process
  # args:
  #   RUBY_VERSION: 3.3.5
  # secrets:
  #   - GITHUB_TOKEN
  #   - RAILS_MASTER_KEY

# Use a different ssh user than root
# ssh:
#   user: app

# Use accessory services (secrets come from .kamal/secrets).
# accessories:
#   db:
#     image: mysql:8.0
#     host: 192.168.0.2
#     # Change to 3306 to expose port to the world instead of just local network.
#     port: "127.0.0.1:3306:3306"
#     env:
#       clear:
#         MYSQL_ROOT_HOST: '%'
#       secret:
#         - MYSQL_ROOT_PASSWORD
#     files:
#       - config/mysql/production.cnf:/etc/mysql/my.cnf
#       - db/production.sql:/docker-entrypoint-initdb.d/setup.sql
#     directories:
#       - data:/var/lib/mysql
#   redis:
#     image: redis:7.0
#     host: 192.168.0.2
#     port: 6379
#     directories:
#       - data:/data
